services:

  ### Databases ###
  postgres-orchestrator:
    image: t2project/eventuate-tram-sagas-postgres:0.23.0.RELEASE-fixed # see PR https://github.com/eventuate-foundation/eventuate-common/pull/135
    environment:
      POSTGRES_USER: eventuate
      POSTGRES_PASSWORD: eventuate
      USE_DB_ID: "true"
    expose:
      - "5432"
    networks:
      - t2-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  postgres-inventory:
    image: t2project/eventuate-tram-sagas-postgres:0.23.0.RELEASE-fixed # see PR https://github.com/eventuate-foundation/eventuate-common/pull/135
    environment:
      POSTGRES_USER: inventory
      POSTGRES_PASSWORD: inventory
      USE_DB_ID: "true"
    expose:
      - "5432"
    networks:
      - t2-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  mongo-cart:
    image: bitnami/mongodb:7.0
    expose:
      - "27017"
    networks:
      - t2-network
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' --quiet
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  mongo-order:
    image: bitnami/mongodb:7.0
    expose:
      - "27017"
    networks:
      - t2-network
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' --quiet
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  ### Eventuate SAGA Services ###
  zookeeper:
    image: eventuateio/eventuate-zookeeper:0.18.0.RELEASE
    expose:
      - "2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      KAFKA_HEAP_OPTS: -Xmx64m
    networks:
      - t2-network

  kafka:
    image: eventuateio/eventuate-kafka:0.18.0.RELEASE
    expose:
      - "9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_LISTENERS: LC://kafka:29092,LX://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LC://kafka:29092,LX://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LC:PLAINTEXT,LX:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LC
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: -Xmx192m
    networks:
      - t2-network

  cdcservice:
    image: eventuateio/eventuate-cdc-service:0.16.0.RELEASE
    expose:
      - "8080"
    depends_on:
      postgres-orchestrator:
        condition: service_healthy
      postgres-inventory:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      JAVA_OPTS: -Xmx64m
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181
      EVENTUATE_CDC_PIPELINE_PIPELINE1_TYPE: eventuate-tram
      EVENTUATE_CDC_PIPELINE_PIPELINE1_READER: reader1
      EVENTUATE_CDC_PIPELINE_PIPELINE2_TYPE: eventuate-tram
      EVENTUATE_CDC_PIPELINE_PIPELINE2_READER: reader2
      EVENTUATE_CDC_READER_READER1_TYPE: postgres-wal
      EVENTUATE_CDC_READER_READER1_DATASOURCEURL: jdbc:postgresql://postgres-orchestrator:5432/eventuate
      EVENTUATE_CDC_READER_READER1_DATASOURCEUSERNAME: eventuate
      EVENTUATE_CDC_READER_READER1_DATASOURCEPASSWORD: eventuate
      EVENTUATE_CDC_READER_READER1_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_READER1_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/orchestrator
      EVENTUATE_CDC_READER_READER1_OUTBOXID: 1
      EVENTUATE_CDC_READER_READER2_TYPE: postgres-wal
      EVENTUATE_CDC_READER_READER2_DATASOURCEURL: jdbc:postgresql://postgres-inventory:5432/inventory
      EVENTUATE_CDC_READER_READER2_DATASOURCEUSERNAME: inventory
      EVENTUATE_CDC_READER_READER2_DATASOURCEPASSWORD: inventory
      EVENTUATE_CDC_READER_READER2_DATASOURCEDRIVERCLASSNAME: org.postgresql.Driver
      EVENTUATE_CDC_READER_READER2_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/inventory_service
      EVENTUATE_CDC_READER_READER2_OUTBOXID: 2
    networks:
      - t2-network
    healthcheck:
      test: curl -m 5 -f -s http://localhost:8080/actuator/health | grep "{\"status\":\"UP\"" || exit 1
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  ### T2 Services ###
  cart:
    image: t2project/cart:main
    expose:
      - "8080"
    depends_on:
      mongo-cart:
        condition: service_healthy
    environment:
      MONGO_HOST: mongo-cart
      T2_CART_TTL: "0"
      T2_CART_TASKRATE: "0"
      T2_JAEGER_ENABLED: "FALSE"
      T2_JAEGER_HOST: localhost
    networks:
      - t2-network
    healthcheck:
      test: curl -m 5 -f -s http://localhost:8080/actuator/health/readiness | grep UP || exit 1
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  inventory:
    image: t2project/inventory:main
    expose:
      - "8080"
    depends_on:
      postgres-inventory:
        condition: service_healthy
      kafka:
        condition: service_healthy
      cdcservice:
        condition: service_started
    environment:
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181
      T2_INVENTORY_SIZE: "25"
      T2_INVENTORY_TASKRATE: "0"
      T2_INVENTORY_TTL: "0"
      T2_INVENTORY_SET_UNITS_TO_MAX: "TRUE"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_DATASOURCE_PASSWORD: inventory
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory/inventory
      SPRING_DATASOURCE_USERNAME: inventory
      SPRING_PROFILES_ACTIVE: saga
      T2_JAEGER_ENABLED: "FALSE"
      T2_JAEGER_HOST: localhost
    networks:
      - t2-network
    healthcheck:
      test: curl -m 5 -f -s http://localhost:8080/actuator/health/readiness | grep UP || exit 1
      start_period: "60s"
      start_interval: "1s"
      interval: "1h"

  orchestrator:
    image: t2project/orchestrator:main
    expose:
      - "8080"
    depends_on:
      postgres-orchestrator:
        condition: service_healthy
      kafka:
        condition: service_healthy
      cdcservice:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-orchestrator:5432/eventuate
      SPRING_DATASOURCE_USERNAME: eventuate
      SPRING_DATASOURCE_PASSWORD: eventuate
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181
      T2_JAEGER_ENABLED: "FALSE"
      T2_JAEGER_HOST: localhost
    networks:
      - t2-network
    healthcheck:
      test: curl -m 5 -f -s http://localhost:8080/actuator/health/readiness | grep UP || exit 1
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  order:
    image: t2project/order:main
    expose:
      - "8080"
    depends_on:
      mongo-order:
        condition: service_healthy
      postgres-orchestrator:
        condition: service_healthy
      kafka:
        condition: service_healthy
      cdcservice:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-orchestrator:5432/eventuate
      SPRING_DATASOURCE_USERNAME: eventuate
      SPRING_DATASOURCE_PASSWORD: eventuate
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181
      MONGO_HOST: mongo-order
      T2_JAEGER_ENABLED: "FALSE"
      T2_JAEGER_HOST: localhost
    networks:
      - t2-network
    healthcheck:
      test: curl -m 5 -f -s http://localhost:8080/actuator/health/readiness | grep UP || exit 1
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  payment:
    image: t2project/payment:main
    expose:
      - "8080"
    depends_on:
      postgres-orchestrator:
        condition: service_healthy
      kafka:
        condition: service_healthy
      cdcservice:
        condition: service_started
    environment:
      T2_PAYMENT_PROVIDER_ENABLED: "FALSE"
      T2_PAYMENT_PROVIDER_DUMMY_URL: http://dummy:8080/pay
      T2_PAYMENT_PROVIDER_TIMEOUT: 5
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-orchestrator:5432/eventuate
      SPRING_DATASOURCE_USERNAME: eventuate
      SPRING_DATASOURCE_PASSWORD: eventuate
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181
      T2_JAEGER_ENABLED: "FALSE"
      T2_JAEGER_HOST: localhost
    networks:
      - t2-network
    healthcheck:
      test: curl -m 5 -f -s http://localhost:8080/actuator/health/readiness | grep UP || exit 1
      start_period: "30s"
      start_interval: "1s"
      interval: "1h"

  uibackend:
    image: t2project/uibackend:main
    expose:
      - "8080"
    depends_on:
      cart:
        condition: service_started
      inventory:
        condition: service_started
      orchestrator:
        condition: service_started
    environment:
      T2_ORCHESTRATOR_URL: http://orchestrator:8080/order
      T2_CART_URL: http://cart:8080/cart
      T2_INVENTORY_URL: http://inventory:8080/inventory
      T2_RESERVATION_ENDPOINT: reservation
      T2_COMPUTATION_SIMULATOR_URL: http://computation-simulator:8080/compute
      T2_JAEGER_ENABLED: "FALSE"
      T2_JAEGER_HOST: localhost
    networks:
      - t2-network
    healthcheck:
      test: curl -m 5 -f -s http://localhost:8080/actuator/health/readiness | grep UP || exit 1
      start_period: "60s"
      start_interval: "1s"
      interval: "1h"

  # ui:
  #   image: t2project/ui:main
  #   expose:
  #     - "8080"
  #   depends_on:
  #     uibackend:
  #       condition: service_started
  #   environment:
  #     T2_UIBACKEND_URL: http://uibackend:8080
  #     T2_JAEGER_ENABLED: "FALSE"
  #     T2_JAEGER_HOST: localhost
  #   networks:
  #     - t2-network

  jmeter:
    image: t2project/jmeter:5.6.2
    environment:
      JVM_XMN: 150 # maximum nursery size
      JVM_XMS: 250 # initial heap size
      JVM_XMX: 1000 # maximum heap size
    networks:
      - t2-network
    depends_on:
      uibackend:
        condition: service_healthy

networks:
  t2-network:
